
project.ext.mainClassName = "de.bioviz.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

dependencies {
    compile project(":core")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    compile "args4j:args4j:2.33"
}

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
}

task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
            style: file('../config/checkstyle-noframes-sorted.xsl'),
            out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}
checkstyleMain.finalizedBy checkstyleHtml

sonarqube {
    properties {
        property "sonar.sources", "src/"
        property "sonar.exclusions", "src/de/bioviz/parser/generated/*"
    }
}

tasks.matching { task -> task.name == "checkstyleMain" }.all {
    outputs.upToDateWhen { false }
}


task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.ext.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    from {configurations.compile.collect {it.isDirectory() ? it : zipTree(it) }}

    with jar
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
