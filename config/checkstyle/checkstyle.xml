<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->


<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="severity" value="warning"/>
    <property name='localeCountry' value=''/>
    <property name='localeLanguage' value=''/>

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage">
        <property name="severity" value="info"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!-- This check is bullshit as tabs are the proper way of indenting
    <module name="FileTabCharacter"/>
    -->

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="config/checkstyle/suppressions.xml"/>
    </module>

    <module name="TreeWalker">


        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <!-- defaults to sun.* packages -->
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <!-- It does not really make much sense to treat a tab as anything but a single
            character when determining the length of a line -->
            <property name="tabWidth" value="1"/>
        </module>
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, CLASS_DEF, ENUM_DEF, INTERFACE_DEF, CTOR_DEF, METHOD_DEF, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>

        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>


        <module name="OperatorWrap">
            <property name="tokens"
                      value="PLUS"/>
            <property name="option" value="eol"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->

        <!-- If arrays are initialized over severy lines, every line containing a values must end
        with a comma. That allows for easy reordering. If the initialization is on a single line,
		no trailing comma is needed 
		
		This option is obviously annoying -> turn it off-->
		<!--<module name="ArrayTrailingComma"/> -->


        <!-- I quote "Rationale: Some developers find inline conditionals hard to read, so their
        employer's coding standards forbid them." :D -->
        <module name="AvoidInlineConditionals">
            <property name="severity" value="warning"/>
        </module>
        <!-- Make sure that there is an FooClass.equals(Object o) method (if equals is overridden).
        The point is that people tend to implement FooClass.equals(FooClass f) only -->
        <module name="CovariantEquals"/>
        <module name=" EmptyStatement"/>
        <!-- force overriding of hashCode() if equals() is overridden -->
        <module name="EqualsHashCode"/>
        <!-- This is nice:
            String nullString = null;
            nullString.equals("My_Sweet_String");

        should be refactored to

            String nullString = null;
            "My_Sweet_String".equals(nullString);
        -->
        <module name="EqualsAvoidNull"/>

        <!-- Disallow labels -->
		<module name="IllegalToken">
			    <property name="tokens" value="LITERAL_NATIVE"/>
		</module>
        <!--
        this module checks whether parameters or variables shadow class fields.
        see http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.html
        -->
        <module name="HiddenField">
            <!-- using the same name within the constructor is imho the totally right way to go! -->
            <property name="ignoreConstructorParameter" value="true"/>
            <!-- using different names in setters also leads to more confusion than it solves -->
            <property name="ignoreSetter" value="true"/>
            <!-- currently we do not use the 'Builder-pattern' but that would totally make sens -->
            <!-- <property name="setterCanReturnItsClass" value="true"/> current checkstyle version does not support this -->
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
          <property name="ignoreFieldDeclaration" value="true"/>
          <property name="ignoreAnnotation" value="true"/>
		</module>
        <module name="MissingSwitchDefault"/>
        <!-- basically disallow changing loop variables (usually i,j, etc.) -->
        <module name="ModifiedControlVariable">
            <property name="skipEnhancedForLoopVariable" value="true"/>
            <property name="severity" value="error"/>
        </module>
        <!--<module name="RedundantThrows"/>-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth"/>
        <!-- depth is 1 -->
        <module name="PackageDeclaration"/>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="MissingCtor"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="UnnecessaryParentheses"/>


        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="InnerTypeLast"/>
        <!--
            Even though this check seems to be quite stupid, I'll give it a try and manually exclude variables I
            definitely want to be publicly available -->
        <module name="VisibilityModifier">
            <property name="publicMemberPattern" value="^serialVersionUID$|^fst$|^snd$"/>

            <!-- This allows protected class members. I have no clue why they should be disabled -->
            <property name="packageAllowed" value="true"/>
        </module>
        <!-- This seems to be a pretty stupid check. See http://checkstyle.sourceforge.net/config_design.html#DesignForExtension-->
        <!-- <module name="DesignForExtension"/> -->


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="FinalParameters">
            <!-- final parameters in general are very clever. Lets see what happens if we enforce them everywhwere -->
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, LITERAL_CATCH, FOR_EACH_CLAUSE"/>
        </module>
        <module name="TodoComment">
            <property name="format" value="(TODO)|(FIXME)"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="UpperEll"/>
        <module name="OuterTypeFilename"/>

    </module>

</module>

