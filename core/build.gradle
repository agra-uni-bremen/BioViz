
dependencies {
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    testCompile 'junit:junit:4.12'
}

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
        resources {
            srcDir 'assets/'
        }
    }
    test{
        java {
            srcDir 'tests/'
        }
    }
}

task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
            style: file('../config/checkstyle-noframes-sorted.xsl'),
            out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}
checkstyleMain.finalizedBy checkstyleHtml
checkstyleMain.exclude '**/bioparser/**'

sonarqube {
    properties {
        property "sonar.sources", "src/"
        property "sonar.exclusions", "src/de/bioviz/parser/generated/*"
    }
}

configurations {
    compile.extendsFrom antlr4
}

tasks.matching { task -> task.name == "checkstyleMain" }.all {
    outputs.upToDateWhen { false }
}

test {
    testLogging.showStandardStreams = true


    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

eclipse.project {
    name = appName + "-core"
}
