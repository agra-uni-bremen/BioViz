buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
    }
}

apply plugin: 'me.champeau.gradle.antlr4'
apply plugin: 'org.sonarqube'

antlr4.source = file('lib/parser')
antlr4.output = file('core/src/de/bioviz/parser/generated')
antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']


// add antlr4 to classpath
configurations {
    compile.extendsFrom antlr4
}


// configuration is done in the sonar-project.properties file
// apply plugin: "sonar-runner"


allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "me.champeau.gradle.antlr4"
    apply plugin: "checkstyle"
    
    checkstyle {
      toolVersion = "6.19"
      ignoreFailures = false
      showViolations = true
      configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    version = '1.0'
    ext {
        appName = 'BioViz'
        gdxVersion = '1.9.1'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    sonarqube {
      properties {
        // Required metadata
        property "sonar.projectKey", "de.dfki.bioviz"
        property "sonar.projectName", "BioViz"
        property "sonar.projectVersion", "1.0"
        // Comma-separated paths to directories with sources (required)
        //property "sonar.sources", "core/src,desktop/src"
        //property "sonar.exclusions", "core/src/de/bioviz/parser/generated/*"
        // Language
        property "sonar.language", "java"
        // Encoding of the source files
        property "sonar.sourceEncoding", "UTF-8"
      }
    }

}

project(":desktop") {
    apply plugin: "java"

    task checkstyleHtml << {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('../config/checkstyle-noframes-sorted.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
    checkstyleMain.finalizedBy checkstyleHtml

    sourceSets{
        main{
            java{
                srcDir 'src/'
            }
        }
    }

    sonarqube {
      properties {
        property "sonar.sources", "src/"
        property "sonar.exclusions", "src/de/bioviz/parser/generated/*"
      }
    }

    antlr4.source = file('../lib/parser')
    antlr4.output = file('../core/src/de/bioviz/parser/generated')
    antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "args4j:args4j:2.33"
    }

    tasks.matching { task -> task.name == "checkstyleMain" }.all {
        outputs.upToDateWhen { false }
    }

    //compileJava.finalizedBy(checkstyleMain)
}

project(":core") {
    apply plugin: "java"

    antlr4.source = file('../lib/parser')
    antlr4.output = file('../core/src/de/bioviz/parser/generated')
    antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']
    // make the Java compile task depend on the antlr4 task
    compileJava.dependsOn antlr4

    task checkstyleHtml << {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('../config/checkstyle-noframes-sorted.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
    checkstyleMain.finalizedBy checkstyleHtml
    checkstyleMain.exclude '**/bioparser/**'

    sourceSets{
        main{
            java {
                srcDir 'src/'
            }
            resources {
                srcDir 'assets/'
            }
        }
        test{
            java {
                srcDir 'tests/'
            }
        }
    }

    sonarqube {
      properties {
        property "sonar.sources", "src/"
        property "sonar.exclusions", "src/de/bioviz/parser/generated/*"
      }
    }

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        testCompile 'junit:junit:4.12'
    }

    configurations {
        compile.extendsFrom antlr4
    }

    tasks.matching { task -> task.name == "checkstyleMain" }.all {
        outputs.upToDateWhen { false }
    }


    test {
        testLogging.showStandardStreams = true


        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
        }
    }

    //compileJava.finalizedBy(checkstyleMain)
}

tasks.eclipse.doLast {
    delete ".project"
}
