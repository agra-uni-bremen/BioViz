buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

apply plugin: 'me.champeau.gradle.antlr4'
apply plugin: "sonar"

antlr4.source = file('lib/parser')
antlr4.output = file('core/src/de/bioviz/parser/generated')
antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']


// add antlr4 to classpath
configurations {
    compile.extendsFrom antlr4
}


// configuration is done in the sonar-project.properties file
apply plugin: "sonar-runner"


allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "me.champeau.gradle.antlr4"

    version = '1.0'
    ext {
        appName = 'BioViz'
        gdxVersion = '1.9.1'
        roboVMVersion = '1.0.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"

    apply plugin: "checkstyle"
    checkstyle.ignoreFailures = false
    checkstyle.showViolations = true
    checkstyle {
        toolVersion = "6.0"
    }
    task checkstyleHtml << {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('../config/checkstyle-noframes-sorted.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
    checkstyleMain.finalizedBy checkstyleHtml

    sourceSets{
        main{
            java{
                srcDir 'src/'
            }
        }
    }
    antlr4.source = file('../lib/parser')
    antlr4.output = file('../core/src/de/bioviz/parser/generated')
    antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }

    tasks.matching { task -> task.name == "checkstyleMain" }.all {
        outputs.upToDateWhen { false }
    }

    //compileJava.finalizedBy(checkstyleMain)
}

project(":core") {
    apply plugin: "java"

    antlr4.source = file('../lib/parser')
    antlr4.output = file('../core/src/de/bioviz/parser/generated')
    antlr4.extraArgs = ['-package', 'de.bioviz.parser.generated']
    // make the Java compile task depend on the antlr4 task
    compileJava.dependsOn antlr4

    apply plugin: "checkstyle"
    task checkstyleHtml << {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('../config/checkstyle-noframes-sorted.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
    checkstyleMain.finalizedBy checkstyleHtml
    checkstyleMain.exclude '**/bioparser/**'
    checkstyle.ignoreFailures = false
    checkstyle.showViolations = true
    checkstyle {
        toolVersion = "6.0"
    }

    sourceSets{
        main{
            java {
                srcDir 'src/'
            }
            resources {
                srcDir 'assets/'
            }
        }
        test{
            java {
                srcDir 'tests/'
            }
        }
    }

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        testCompile 'junit:junit:4.12'
    }

    configurations {
        compile.extendsFrom antlr4
    }

    tasks.matching { task -> task.name == "checkstyleMain" }.all {
        outputs.upToDateWhen { false }
    }


    test {
        testLogging.showStandardStreams = true


        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
        }
    }

    //compileJava.finalizedBy(checkstyleMain)
}

tasks.eclipse.doLast {
    delete ".project"
}
